solve 3

1		1 2 3
	sorted  3

2		1 3 2		1 < 3 > 2	a < c		done
	sorted	2
	sorted2	1
		sa
		ra

3		2 3 1		2 < 3 > 1	a > c		done
	sorted  2
	sorted2 1
		rra

4		3 2 1		3 > 2 > 1	a < c		done
	sorted	1
	sorted2	1
		sa
		rra

5		2 1 3		2 > 1 < 3	a < c		done
	sorted	1
	sorted2	2
		sa

6		3 1 2		3 > 1 < 2	a > c		done
	sorted	1
	sorted2	2
		ra


1 2 3 4
1 2 4 3		rra rra sa rra rra 5
1 3 2 4		ra sa rra
1 3 4 2		rra pb ra pa rra
1 4 2 3		ra pb
1 4 3 2		pivot 3 ra pb solve 3 pa ra
2 1 3 4
2 1 4 3		pb pb ss pa pa
2 3 1 4		rra pb solve_3 pa rra
2 3 4 1		rra
2 4 1 3
2 4 3 1
3 1 2 4
3 1 4 2
3 2 1 4		sa
3 2 4 1
3 4 1 2
3 4 2 1
4 1 2 3
4 1 3 2
4 2 1 3
4 2 3 1
4 3 1 2

4 3 2 1		pb pb
2 1 		3 4 ss
1 2			4 3 pa
4 1 2		3 pa
3 4 1 2		ra ra
sorted

pivot:		2 > 2 pb
			<= 2 sort

example:
1432 pb
432	ra
324 sa
234 pb
1234


4 3 2 1
pivot:		4 --> pivot == > Mitte
4 3 2 1 			pb
3 2 1		4		pb
2 1			3 4		ss
1 2			4 3		pa
4 1 2		3		pa
3 4 1 2				ra
2 3 4 1				ra
1 2 3 4

4 3 2 1				ra
3 2 1 4				ra
2 1 4 3				pb
1 4 3				pb
4 3			2 1		sa
3 4			2 1		pa
2 3 4		1		pa
1 2 3 4				done

1 2 3 4 5					Pivot 3
5 4 3 2 1					pb		rule above pivot pb pb
4 3 2 1			5			pb		rule above pivot pb pb
3 2 1			4 5			ss		solve 3 + recognize ss is beneficial
2 3 1			5 4			rra		racognize rra is beneficial
1 2 3			5 4			pa		both sides sorted push all to a
5 1 2 3			4			pa		both sides sorted push all to a
4 5 1 2 3					ra		put lowest on top
5 1 2 3 4					ra		put lowest on top
1 2 3 4 5

1 2 3 4 5					Pivot 3
5 4 3 2 1					ra
4 3 2 1 5					ra
3 2 1 5 4					pb
2 1 5 4			3			pb
1 5 4			2 3			pb
5 4				1 2 3		ss
4 5				2 1 3		rrb
4 5				3 2 1		pa
3 4 5			2 1			pa
2 3 4 5			1			pa
1 2 3 4 5					done


1 2 3 4 5					Pivot 3
5 4 3 2 1					ra
4 3 2 1 5					ra
3 2 1 5 4					ra
2 1 5 4 3					pb
1 5 4 3			2			pb
5 4 3			1 2 		ss
4 5 3			2 1			rra
3 4 5			2 1			pa
2 3 4 5			1			pa
1 2 3 4 5					done

1 2 3 4 5					Pivot 3
5 4 3 2 1					pb			rule: above pivot pb
4 3 2 1 		5			pb			rule: above pivot pb
3 2 1			4 5 		rr			solve 3 + recognize rr
2 3 1			5 4			rra			solve 3
1 2 3			5 4			pa pa		rule: a sorted, b sorted, pa pa
4 5 1 2 3					ra ra		rule: sorted but lowest not on top

necessary adaptations:
-	indexing					(2 Abstand wegen ungerade zahlen?)
-	calculate, identify pivot
-	add sizes of the stacks




5 4 3 2 1					pb
4 3 2 1 		5			pb
3 2 1			4 5 		pb
2 1				3 4 5		ss
1 2				4 3 5		rrb
1 2				5 4 3		pa pa pa
3 4 5 1 2					rrb rrb



1 2 3 4 5					pivot 3
1 4 3 2 5					ra			rule: below pivot below pivot ra
4 3 2 5 1					pb			rule: above pivot pb
3 2 5 1			4			sa			rule: pivot & below not in order sa
2 3 5 1			4			ra ra		rule: sorted & below pivot ra ra
5 1 2 3						pa			rule: above pivot but sorted pa
4 5 1 2 3					ra ra		rule: sorted bring 1 to 1
1 2 3 4 5



solve 10
0 1 2 3 4 5 6 7 8 9 											Pivot 4,5
9 8 7 6 5 4 3 2 1 0												pb pb pb pb pb 			= 5
4 3 2 1 0							5 6 7 8 9					pivot 2
4 3 2 1 0							5 6 7 8 9					pb pb					= 2
2 1 0								3 4 5 6 7 8 9				sa rra					= 2		opt ss
0 1 2								3 4 5 6 7 8 9				pa pa					= 2
4 3 0 1 2							5 6 7 8 9					sa ra ra				= 3		opt ss
0 1 2 3 4							5 6 7 8 9					pa pa 					= 2
6 5 0 1 2 3 4						7 8 9						sa ra ra				= 3		opt ss
5 6 0 1 2 3 4						7 8 9						ra ra					= 2
0 1 2 3 4 5 6						7 8 9						pa pa					= 2
8 7 0 1 2 3 4 5 6					9							sa ra ra				= 3		opt ss
0 1 2 3 4 5 6 7 8					9							pa ra					= 2
0 1 2 3 4 5 6 7 8 9												SUM						28 moves

solve 10 optimized
0 1 2 3 4 5 6 7 8 9 											Pivot 4,5
9 8 7 6 5 4 3 2 1 0												pb pb pb pb pb 			= 5
4 3 2 1 0							5 6 7 8 9					pivot 2
4 3 2 1 0							5 6 7 8 9					pb pb					= 2
2 1 0								3 4 5 6 7 8 9				ss rra					= 2		opt ss
0 1 2								4 3 5 6 7 8 9				pa pa					= 2
3 4 0 1 2							5 6 7 8 9					ra ra					= 2		opt ss
0 1 2 3 4							5 6 7 8 9					pa pa 					= 2
6 5 0 1 2 3 4						7 8 9						ss ra ra				= 3		opt ss
5 6 0 1 2 3 4						8 7 9						rr rr					= 2		opt rr rr
0 1 2 3 4 5 6						9 8 7						pa pa pa				= 3
7 8 9 0 1 2 3 4 5 6												ra ra ra				= 3
0 1 2 3 4 5 6 7 8 9												SUM						26 moves



logic
0 1 2 3 4 5 6 7 8 9 											Pivot 4,5
5 9 3 2 6 8 1 0 7 4												pb pb					2
3 2 6 8 1 0 7 4						9 5							sa						1
2 3 6 8 1 0 7 4 					9 5							ra ra					2
6 8 1 0 7 4 2 3						9 5							pb pb					2		opt rb
1 0 7 4 2 3							8 6 9 5						sa						1
0 1 7 4 2 3							8 6 9 5						ra ra					2
7 4 2 3 0 1							8 6 9 5						pb pb					2
2 3 0 1								4 7 8 6 9 5					ra ra pa ra				4
0 1 2 3 4							7 8 6 9 5					rrb pa					2
5 0 1 2 3 4							7 8 6 9						ra						1
0 1 2 3 4 5							7 8 6 9						sb rrb					2
0 1 2 3 4 5							9 8 7 6						pb pb pb pb				4
6 7 8 9 0 1 2 3 4 5												ra ra ra ra				4
0 1 2 3 4 5 6 7 8 9												SUM						29 moves

pure pivot
0 1 2 3 4 5 6 7 8 9 											Pivot-l 4,5
5 9 3 2 6 8 1 0 7 4												pb pb
3 2 6 8 1 0 7 4						9 5							ra ra
6 8 1 0 7 4	3 2						9 5							pb pb
1 0 7 4 3 2							8 6 9 5						ra ra pb
4 3 2 1 0							7 8 6 9 5					Pivot-l 2	pb pb
2 1 0								3 4 7 8 6 9 5				sa rra
0 1 2								3 4 7 8 6 9 5				Pivot-r 6	pa pa
4 3 0 1 2							7 8 6 9 5					rb rb pa
6 4 3 0 1 2							9 5 7 8						rb pa
5 6 4 3 0 1 2						7 8 9						sb rrb
(5 6 4 3 0 1 2						9 8 7						sa pb pb)
(4 3 0 1 2							6 5 9 8 7							)
5 6 4 3 0 1 2						7 8 9						pivot-l 3 pb pb
4 3 0 1 2							6 5 7 8 9					pivot-l 2 pb pb
0 1 2								3 4 6 5 7 8 9

optimized pure pivot:
0 1 2 3 4 5 6 7 8 9 											Pivot-l 4,5
5 9 3 2 6 8 1 0 7 4												pb pb					2
3 2 6 8 1 0 7 4						9 5							sa						1	3
2 3	6 8 1 0 7 4						9 5							ra rr					2	5
6 8 1 0 7 4	2 3						5 9							pb pb					2	7
1 0 7 4 2 3							8 6 5 9						sa						1	8
0 1 7 4 2 3							8 6 5 9						ra						1	9
1 7 4 2 3 0							8 6 5 9						rr						1	10
7 4 2 3 0 1							6 5 9 8						pb						1	11
4 2 3 0 1							7 6 5 9 8					rb rb rb				3	14
4 2 3 0 1							9 8 7 6 5					pb						1	15
2 3 0 1								4 9 8 7 6 5					rr						1	16
3 0 1 2								9 8 7 6 5 4					ra						1	17
0 1 2 3								9 8 7 6 5 4					pb pb pb pb pb pb		6	23
4 5 6 7 8 9 0 1 2 3												ra ra ra ra ra ra		6	29
0 1 2 3 4 5 6 7 8 9					SUM														29

1 0 7 4 2 3 						8 6 9 5						ra ra pb
4 3 2 1 0							7 8 6 9 5					Pivot-l 2	pb pb
2 1 0								3 4 7 8 6 9 5				sa rra
0 1 2								3 4 7 8 6 9 5				Pivot-r 6	pa pa
4 3 0 1 2							7 8 6 9 5					rb rb pa
6 4 3 0 1 2							9 5 7 8						rb pa
5 6 4 3 0 1 2						7 8 9						sb rrb
(5 6 4 3 0 1 2						9 8 7						sa pb pb)
(4 3 0 1 2							6 5 9 8 7							)
5 6 4 3 0 1 2						7 8 9						pivot-l 3 pb pb
4 3 0 1 2							6 5 7 8 9					pivot-l 2 pb pb
0 1 2								3 4 6 5 7 8 9


algorithm:

give indexes, count moves
pivot --> send						Always check if "reachable" lines can be sorted easily
pivot left --> pivot right		and send beneficial/sorted
test first two and last.











if (size %2 != 0)
	Median = (3rd observation + 4th observation)/ 2 = (2+3)/2 = 2.5
	if (value on top >= Mittelwert)
	rechts kleine werte. (Rechts immer kleine Werte!!!?)


